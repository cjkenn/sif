prog       ::= { decl } ;
decl       ::= vardecl    |
               funcdecl   |
	       { stmt }   ;
stmt       ::= ifstmt   |
               forstmt  |
	       exprstmt |
	       retstmt  |
	       block    ;
block      ::= "{" { decl } "}" ;

identpair  ::= IDENT "," IDENT ;
itemlist   ::= { IDENT "=>" expr "," } ;
paramlist  ::= [ { IDENT [ "," ] } ] ;

vardecl    ::= "var" IDENT [ "=" expr | arraydecl | tabledecl ] ";" ;
funcdecl   ::= "fn" IDENT "(" [ paramlist ] ")" block ;
tabledecl  ::= "[[" [ itemlist ] "]]" ;
arraydecl  ::= "[" { expr "," } "]" ;

ifstmt     ::= "if" expr block { "elif" expr block } [ "else" block ] ;
forstmt    ::= "for" identpair "in" expr block ;
exprstmt   ::= expr ";" ;
retstmt    ::= "return" [ expr ] ";" ;

expr         ::= assignexpr ;
assignexpr   ::= { [ funccall "." ] [ arrayaccess ] assignexpr } | orexpr ;
orexpr       ::= andexpr { [ "||" ] andexpr } ;
andexpr      ::= eqexpr { [ "&&" ] eqexpr } ;
eqexpr       ::= cmpexpr { [ "!=" ] [ "==" ] cmpexpr } ;
cmpexpr      ::= addorsubexpr { [ ">" ] [ ">=" ] [ "<" ] [ "<=" ] addorsubexpr } ;
addorsubexpr ::= mulordivexpr { [ "+" ] [ "-" ] mulordivexpr } ;
mulordivexpr ::= modexpr { [ "*" ] [ "/" ] modexpr } ;
modexpr      ::= unaryexpr { [ "%" ] unaryexpr } ;
unaryexpr    ::= [ "-" ]  [ "!" ] unaryexpr | funccall ;
funccall     ::= [ "@" ] primary "(" [ paramlist ] ")" |
                 tableaccess |
		 arrayaccess |
		 primary ;
tableaccess  ::= primary "." primary ;
arrayaccess  ::= primary "[" expr "]" ;
primary      ::= NUMBER |
                 STRING |
	         TRUE   |
	         FALSE  |
	         IDENT  |
	         groupexpr ;
groupexpr    ::= "(" expr ")" ;
